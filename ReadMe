# OREO-OpenIE-Relation-Extraction-for-Ontology

This project contains the Relation and Event Extarction system of Indian Institute of Technology Delhi (IITD). This is system for extracting from the text information regarding certain attributes of entities present in the text, which can be a person or some type of organization. 

For e.g.
“Pranab Kumar Mukherjee is the 13th and current President of India.”
Entity 		: Pranab Kumar Mukherjee
Relation 	: per:title
Slot-Fill 	: President

It uses an alternate paradigm for information extraction that is based on domain independent semantic processing of sentence called Open Information Extraction(OpenIE).
Currently the system focuses on extracting some fixed number of relations for persons and organizations. However it could be modified to enable extractions for a particular domain.


Running : 
In the project the class ExtractionEngine.java is the main entry point to the system. It conatains method "processText" which take 2 argument the text input to be processed and second a boolean variable to indicate whether to use the dependency patterns or not. Thsi function can be 
The processText function performs the extraction in pipeline with steps
1. Grammatical Annotations using Stanford corenlp tool (TextAnnotatorKBP.java)
2. Gets OpenIE extractions
3. normalizes the extraction (PreProcessTextNormalization.java)
4. Does pattern matching over the normalized extraction (KBPRelationClassifier.java)
5. Extracts slotfill if the pattern matches (getSlotFill4 function)
6. Performs lexico-semantic extractions over original sentence (LexicalClassifier.java)
7. Extracts attributes using dependency patterns if boolean is true (DependencyAnnotation.java)


Normalizer :
The normalizer uses many gazetteer list to nomalize the openIE extarctions. The list are located in Resources/KBP. The normalizations are
• PERSON
• LOCATION
• ORGANIZATION
• JOBTITLE
• HEADJOBTITLE
• COUNTRY
• CITY
• STATEORPROVINCE
• NATIONALITY
• INTEGER
• DATE
• CRIME
• SCHOOL
• RELIGION

This list are not exclusive and can be modified by adding the desired entry in the related gazetteer file. New domain specific gazatteer list can be added to the system with some modification in the "PreProcessTextNormalization.java" file.

Pattern Files.

KBP :
The KBP patterns are present in Resources/KBP/all.patterns. It has following rule structure
1. Target relation: This represents the relation (e.g., per:cause of death) being mapped to with this rule.
2. Entity in: This represents where the input entity (e.g., Steve Jobs) should be present. Possible values are arg1, arg2, and rel.
3. Slotfill in: This maintains the part of the extraction from where the slot needs to be extracted. Possible values are arg1, arg2 and rel.
4. Slotfill Type: This is the type of the slotfill and can take values from any entity type defined at entity extraction phase.
5. Arg1Terms: This maintains any specific words that should be present in arg1.
6. Relation Terms: This maintains any specific words that should be present in the relation phrase.
7. Arg2BeginsWith: This maintains any specific words that arg2 should begin with

The fields in the rules are tab separated
e.g.
per:country_of_death	1	died	at	arg1	arg2	COUNTRY	NONE	NONE

All caps entry in a particular field specifies that the value is Normalized from the gazetteer lists. "ANY" and "NONE" are special types signifying that a particular field can contain any value or that field is not required to make the classification.
New rules can be added in all.patterns file in the prescribed format.

Lexico-semantic pattern :
Currently there is not seperate file for lexico sematic patterns. These patterns are directly coded into LexicalClassifier.java 

Dependency Pattern :
It also uses Dependency parse of the text to extract relationships.  
Dependency Patterns are present in file Resources/DependencyPathPattern. It has following pattern type
"relationType	Node	Edge	Node 	Edge...........Node"
where Nodes are the normalized or un-normalized tokens in the text and edgs are the relations between the nodes in the dependency parse of the text. Again the fields are tab separated.
e.g.
per:employee_or_member_of PERSON appos HEADJOBTITLE nmod:poss ORGANIZATION


The path of all the files are present in Resources/default.properties and Resources/KBP/kbpDefault.properties. If any new normalization is to be added it can be added here.

This project requires a list of libraries(jars) to be included in the classpath for execution. Following are the list to jars to be added to the classpath
1. openie-assembly-4.1.4-SNAPSHOT.jar
2. stanford-corenlp-3.5.2.jar
3. stanford-corenlp-3.5.2-models.jar
4. joda-time.jar
5. joda-time-2.1-sources.jar
6. jollyday.jar
7. jollyday-0.4.7-sources.jar
8. jyaml-1.3.jar
9. noggit-0.5.jar
10. commons-io-2.1.jar
11. commons-logging-1.2.jar
12. httpclient-4.2.3.jar
13. httpcore-4.2.jar
14. httpmime-4.2.3.jar
